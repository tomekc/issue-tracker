// A JSON array loaded to memory will serve as 'database'
const mockData = require('../data/issues.json');

const { UserError } = require('errors.js');

const pendingState = 'PENDING';
const openState = 'OPEN';
const closedState = 'CLOSED';

const validStates = [pendingState, openState, closedState];
const validStateTransitions = {
    [pendingState]: [openState, closedState],
    [openState]: [closedState],
    [closedState]: []
};

function canTransition(from, to) {
    let trans = validStateTransitions[from];
    if (trans && trans.includes(to)) {
        return true;
    }
    return false;
}

function getIssues() {
    return mockData;
}

function setState(id, state) {
    let item = mockData.filter( (x) => x.id == id ).shift();
    if (item) {
        if (canTransition(item.state, state)) {
            item.state = state;
            console.log(`Items ${id} state changed to ${state}`);
            return Promise.resolve();
        } else {
            console.error(`Invalid state transition for ${id}: ${item.state} -> ${state}`);
            return Promise.reject(new UserError('Invalid state transition.'));
        }
    } else {
        console.error(`Unable to find issue #${id}`);
        return Promise.reject(new UserError(`Unable to find issue #${id}`));
    }

}


module.exports = {
    getIssues: getIssues,
    setState: setState
};